{"version":3,"sources":["component/Breaks.js","constant.js","component/Session.js","component/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Breaks","min","handleSetTime","isPlayed","isPaused","className","id","type","onClick","disabled","icon","faArrowUp","faArrowDown","Session","Timer","seconds","timerType","startTimer","stopOrPauseTimer","timerHeader","timeRun","sec","minutes","Math","floor","remainderSeconds","displayTimes","faPlay","faPause","faStop","App","useState","breakTime","setBreakTime","sessionTime","setSessionTime","setTimerType","timer","setTimer","setIsPlayed","setIsPaused","countDown","setCountDown","audioRef","useRef","operations","useEffect","audio","current","currentTime","play","clearInterval","then","Date","now","setInterval","secondsLeft","round","handleCountDown","action","preload","src","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAyCeA,EApCA,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,IAAKC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC9C,OACE,yBAAKC,UAAU,oBAAoBC,GAAG,iBACpC,4BACEC,KAAK,SACLC,QAAS,WACPN,ECXe,QAEA,cDWjBG,UAAU,iBACVC,GAAG,kBACHG,SAAUL,GAAYD,GAAoB,KAARF,GAElC,kBAAC,IAAD,CAAiBS,KAAMC,OAEzB,yBAAKN,UAAU,SACb,0BAAMC,GAAG,eAAT,SACA,0BAAMD,UAAU,eAAeC,GAAG,gBAC/BL,GAEH,yCAEF,4BACEM,KAAK,SACLC,QAAS,WACPN,EC7Be,QAGA,cD4BjBG,UAAU,iBACVC,GAAG,kBACHG,SAAUL,GAAYD,GAAoB,IAARF,GAElC,kBAAC,IAAD,CAAiBS,KAAME,SEOhBC,EArCC,SAAC,GAAgD,IAA9CZ,EAA6C,EAA7CA,IAAKC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC/C,OACE,yBAAKC,UAAU,oBAAoBC,GAAG,mBACpC,4BACEC,KAAK,SACLF,UAAU,iBACVC,GAAG,oBACHE,QAAS,WACHP,GAAO,IACXC,EDbiB,UACF,cCcjBO,SAAUL,GAAYD,GAAoB,KAARF,GAElC,kBAAC,IAAD,CAAiBS,KAAMC,OAEzB,yBAAKN,UAAU,SACb,0BAAMC,GAAG,eAAT,WACA,0BAAMD,UAAU,eAAeC,GAAG,kBAC/BL,GAEH,0CAEF,4BACEM,KAAK,SACLF,UAAU,iBACVC,GAAG,oBACHE,QAAS,WACPN,ED/BiB,UAEF,cC+BjBO,SAAUL,GAAYD,GAAoB,IAARF,GAElC,kBAAC,IAAD,CAAiBS,KAAME,SC2BhBE,EA1DD,SAAC,GAOR,IANLC,EAMI,EANJA,QACAC,EAKI,EALJA,UACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,iBACAf,EAEI,EAFJA,SACAC,EACI,EADJA,SAEMe,EFZmB,YEavBH,EAA4B,eAAiB,iBAWzCI,EATe,SAAAC,GACnB,IAAMC,EAAUC,KAAKC,MAAMH,EAAM,IAC3BI,EAAmBJ,EAAM,GAI/B,MAHa,UAAMC,EAAU,GAAK,IAAM,IAA3B,OAAgCA,EAAhC,aACXG,EAAmB,GAAK,IAAM,IADnB,OAEVA,GAIWC,CAAaX,GAE7B,OACE,oCACE,uBAAGT,GAAG,eAAea,GACrB,uBAAGb,GAAG,aAAac,GACnB,yBAAKf,UAAU,iBACb,4BACEE,KAAK,SACLC,QAASS,EACTR,SAAUN,IAAaC,EACvBC,UAAU,eACVC,GAAG,cAEH,kBAAC,IAAD,CAAiBI,KAAMiB,OAEzB,4BACEpB,KAAK,SACLC,QAAS,kBAAMU,EFvCH,WEwCZT,SAAUL,IAAaD,EACvBE,UAAU,eACVC,GAAG,SAEH,kBAAC,IAAD,CAAiBI,KAAMkB,OAEzB,4BACErB,KAAK,SACLC,QAAS,kBAAMU,EF/CF,YEgDbb,UAAU,eACVC,GAAG,SAEH,kBAAC,IAAD,CAAiBI,KAAMmB,U,MCyFlBC,MAzIf,WAAgB,IAAD,EACqBC,mBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEyBF,mBAAS,IAFlC,mBAENG,EAFM,KAEOC,EAFP,OAGqBJ,mBHVT,WGOZ,mBAGNf,EAHM,KAGKoB,EAHL,OAIaL,mBAAS,MAJtB,mBAINM,EAJM,KAICC,EAJD,OAKmBP,oBAAS,GAL5B,mBAKN5B,EALM,KAKIoC,EALJ,OAMmBR,oBAAS,GAN5B,mBAMN3B,EANM,KAMIoC,EANJ,OAOqBT,mBAAS,MAP9B,mBAONU,EAPM,KAOKC,EAPL,KASPC,EAAWC,mBAOX1C,EAAgB,SAACK,EAAMsC,GHxBN,UG0BjBtC,EAEA0B,EH1BiB,cGyBfY,EACWb,EAAY,EAEZA,EAAY,GAG3BG,EH/BmB,cG8BVU,EACMX,EAAc,EAEdA,EAAc,IAqEjC,OAnBAY,qBAAU,WHpFe,YGmBnB9B,GAA2BsB,EAAuB,GAAdJ,GHpBnB,UGqBjBlB,GAAyBsB,EAAqB,GAAZN,KAkErC,CAACA,EAAWE,IAEfY,qBAAU,WAlDc,IAAAC,EAmDR,IAAVV,GAAoC,OAArBM,EAASK,SAAoB7C,KAnD1B4C,EAoDJJ,EAASK,SAnDrBC,YAAc,EACpBF,EAAMG,UAoDL,CAACb,IAEJS,qBAAU,WACJ3C,GACFgD,cAAcV,GArDM,SAAApB,GACtB,GAAKlB,IAAYC,EAAjB,CACA,IACMgD,EADMC,KAAKC,MACQ,IAANjC,EACnBqB,EACEa,aAAY,WACV,IAAMC,EAAcjC,KAAKkC,OAAOL,EAAOC,KAAKC,OAAS,KACrD,GAAIE,EAAc,EAMhB,OALAlB,EHnDiB,YGoDftB,EAAwC,GAAZgB,EAA+B,GAAdE,GAE/CE,EHtDiB,YGsDJpB,EHvDE,QACE,gBGuDjBmC,cAAcV,GAGhBH,EAASkB,KACR,OAsCHE,CAAgBrB,IAEhBc,cAAcV,KAEf,CAACtC,EAAUC,EAAUY,IAGtB,yBAAKX,UAAU,iBACb,4BAAQA,UAAU,aAChB,+CAEF,yBAAKA,UAAU,eACb,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CACEJ,IAAK+B,EACL9B,cAAeA,EACfC,SAAUA,EACVC,SAAUA,IAEZ,kBAAC,EAAD,CACEH,IAAKiC,EACLhC,cAAeA,EACfC,SAAUA,EACVC,SAAUA,KAGd,yBAAKC,UAAU,qBACb,kBAAC,EAAD,CACEU,QAASsB,EACTrB,UAAWA,EACXC,WAhES,WACjBsB,GAAY,GACZC,GAAY,IA+DJtB,iBA5De,SAAAyC,GHjEL,WGkEdA,GACFnB,GAAY,GHlEK,YGoEfmB,IACF1B,EAAa,GACbE,EAAe,IACfC,EH3EqB,WG4ErBE,EAAS,MACTC,GAAY,GACZC,GAAY,GACZE,EAAa,MACbS,cAAcV,KAiDRtC,SAAUA,EACVC,SAAUA,MAIhB,2BACEE,GAAG,OACHsD,QAAQ,OACRC,IAAI,wBACJC,IAAKnB,MC/HOoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.90471910.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowDown, faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { BREAKTYPE, INCREMENT, DECREMENT } from '../constant';\n\nconst Breaks = ({ min, handleSetTime, isPlayed, isPaused }) => {\n  return (\n    <div className=\"setting-container\" id=\"break-setting\">\n      <button\n        type=\"button\"\n        onClick={() => {\n          handleSetTime(BREAKTYPE, INCREMENT);\n        }}\n        className=\"setting-button\"\n        id=\"break-increment\"\n        disabled={isPaused || isPlayed || min === 60}\n      >\n        <FontAwesomeIcon icon={faArrowUp} />\n      </button>\n      <div className=\"label\">\n        <span id=\"break-label\">break</span>\n        <span className=\"setting-time\" id=\"break-length\">\n          {min}\n        </span>\n        <span>Length</span>\n      </div>\n      <button\n        type=\"button\"\n        onClick={() => {\n          handleSetTime(BREAKTYPE, DECREMENT);\n        }}\n        className=\"setting-button\"\n        id=\"break-decrement\"\n        disabled={isPaused || isPlayed || min === 1}\n      >\n        <FontAwesomeIcon icon={faArrowDown} />\n      </button>\n    </div>\n  );\n};\n\nexport default Breaks;\n","export const BREAKTYPE = 'BREAK';\nexport const SESSIONTYPE = 'SESSION';\nexport const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\nexport const PAUSED = 'PAUSED';\nexport const STOPPED = 'STOPPED';\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowDown, faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { SESSIONTYPE, INCREMENT, DECREMENT } from '../constant';\n\nconst Session = ({ min, handleSetTime, isPlayed, isPaused }) => {\n  return (\n    <div className=\"setting-container\" id=\"session-setting\">\n      <button\n        type=\"button\"\n        className=\"setting-button\"\n        id=\"session-increment\"\n        onClick={() => {\n          if (min >= 60) return;\n          handleSetTime(SESSIONTYPE, INCREMENT);\n        }}\n        disabled={isPaused || isPlayed || min === 60}\n      >\n        <FontAwesomeIcon icon={faArrowUp} />\n      </button>\n      <div className=\"label\">\n        <span id=\"break-label\">session</span>\n        <span className=\"setting-time\" id=\"session-length\">\n          {min}\n        </span>\n        <span> Length</span>\n      </div>\n      <button\n        type=\"button\"\n        className=\"setting-button\"\n        id=\"session-decrement\"\n        onClick={() => {\n          handleSetTime(SESSIONTYPE, DECREMENT);\n        }}\n        disabled={isPaused || isPlayed || min === 1}\n      >\n        <FontAwesomeIcon icon={faArrowDown} />\n      </button>\n    </div>\n  );\n};\n\nexport default Session;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faPause, faStop } from '@fortawesome/free-solid-svg-icons';\nimport { SESSIONTYPE, PAUSED, STOPPED } from '../constant';\n\nconst Timer = ({\n  seconds,\n  timerType,\n  startTimer,\n  stopOrPauseTimer,\n  isPlayed,\n  isPaused,\n}) => {\n  const timerHeader =\n    timerType === SESSIONTYPE ? \"Let's sweat!\" : 'Rest for a bit';\n\n  const displayTimes = sec => {\n    const minutes = Math.floor(sec / 60);\n    const remainderSeconds = sec % 60;\n    const display = `${minutes < 10 ? '0' : ''}${minutes}  ${\n      remainderSeconds < 10 ? '0' : ''\n    }${remainderSeconds}`;\n    return display;\n  };\n\n  const timeRun = displayTimes(seconds);\n\n  return (\n    <>\n      <p id=\"timer-label\">{timerHeader}</p>\n      <p id=\"time-left\">{timeRun}</p>\n      <div className=\"timer-buttons\">\n        <button\n          type=\"button\"\n          onClick={startTimer}\n          disabled={isPlayed && !isPaused}\n          className=\"timer-button\"\n          id=\"start_stop\"\n        >\n          <FontAwesomeIcon icon={faPlay} />\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => stopOrPauseTimer(PAUSED)}\n          disabled={isPaused || !isPlayed}\n          className=\"timer-button\"\n          id=\"pause\"\n        >\n          <FontAwesomeIcon icon={faPause} />\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => stopOrPauseTimer(STOPPED)}\n          className=\"timer-button\"\n          id=\"reset\"\n        >\n          <FontAwesomeIcon icon={faStop} />\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Timer;\n","/* eslint-disable jsx-a11y/media-has-caption */\nimport React, { useState, useEffect, useRef } from 'react';\nimport Breaks from './component/Breaks';\nimport Session from './component/Session';\nimport Timer from './component/Timer';\nimport { BREAKTYPE, SESSIONTYPE, INCREMENT, PAUSED, STOPPED } from './constant';\nimport './App.css';\n\nfunction App() {\n  const [breakTime, setBreakTime] = useState(5);\n  const [sessionTime, setSessionTime] = useState(25);\n  const [timerType, setTimerType] = useState(SESSIONTYPE);\n  const [timer, setTimer] = useState(1500);\n  const [isPlayed, setIsPlayed] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [countDown, setCountDown] = useState(null);\n\n  const audioRef = useRef();\n\n  const changeSetTimer = () => {\n    if (timerType === SESSIONTYPE) setTimer(sessionTime * 60);\n    if (timerType === BREAKTYPE) setTimer(breakTime * 60);\n  };\n\n  const handleSetTime = (type, operations) => {\n    // if (isPaused || isPlayed) return;\n    if (type === BREAKTYPE) {\n      if (operations === INCREMENT) {\n        setBreakTime(breakTime + 1);\n      } else {\n        setBreakTime(breakTime - 1);\n      }\n    } else if (operations === INCREMENT) {\n      setSessionTime(sessionTime + 1);\n    } else {\n      setSessionTime(sessionTime - 1);\n    }\n  };\n\n  const handlePlayAudio = audio => {\n    audio.currentTime = 0;\n    audio.play();\n  };\n\n  const handleCountDown = sec => {\n    if (!isPlayed || isPaused) return;\n    const now = Date.now();\n    const then = now + sec * 1000;\n    setCountDown(\n      setInterval(() => {\n        const secondsLeft = Math.round((then - Date.now()) / 1000);\n        if (secondsLeft < 0) {\n          setTimer(\n            timerType === SESSIONTYPE ? breakTime * 60 : sessionTime * 60,\n          );\n          setTimerType(timerType === SESSIONTYPE ? BREAKTYPE : SESSIONTYPE);\n          clearInterval(countDown);\n          return;\n        }\n        setTimer(secondsLeft);\n      }, 1000),\n    );\n  };\n\n  const startTimer = () => {\n    setIsPlayed(true);\n    setIsPaused(false);\n  };\n\n  const stopOrPauseTimer = action => {\n    if (action === PAUSED) {\n      setIsPaused(true);\n    }\n    if (action === STOPPED) {\n      setBreakTime(5);\n      setSessionTime(25);\n      setTimerType(SESSIONTYPE);\n      setTimer(1500);\n      setIsPlayed(false);\n      setIsPaused(false);\n      setCountDown(null);\n      clearInterval(countDown);\n    }\n  };\n\n  useEffect(() => {\n    changeSetTimer();\n  }, [breakTime, sessionTime]);\n\n  useEffect(() => {\n    if (timer === 0 && audioRef.current !== null && isPlayed) {\n      handlePlayAudio(audioRef.current);\n    }\n  }, [timer]);\n\n  useEffect(() => {\n    if (isPlayed) {\n      clearInterval(countDown);\n      handleCountDown(timer);\n    } else {\n      clearInterval(countDown);\n    }\n  }, [isPlayed, isPaused, timerType]);\n\n  return (\n    <div className=\"app-container\">\n      <header className=\"app-title\">\n        <h1>Podomoro Timer</h1>\n      </header>\n      <div className=\"app-content\">\n        <div className=\"app-timer-setting\">\n          <Breaks\n            min={breakTime}\n            handleSetTime={handleSetTime}\n            isPlayed={isPlayed}\n            isPaused={isPaused}\n          />\n          <Session\n            min={sessionTime}\n            handleSetTime={handleSetTime}\n            isPlayed={isPlayed}\n            isPaused={isPaused}\n          />\n        </div>\n        <div className=\"app-timer-display\">\n          <Timer\n            seconds={timer}\n            timerType={timerType}\n            startTimer={startTimer}\n            stopOrPauseTimer={stopOrPauseTimer}\n            isPlayed={isPlayed}\n            isPaused={isPaused}\n          />\n        </div>\n      </div>\n      <audio\n        id=\"beep\"\n        preload=\"auto\"\n        src=\"https://goo.gl/65cBl1\"\n        ref={audioRef}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}